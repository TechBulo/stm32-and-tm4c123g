#ifndef TARGET_IS_BLIZZARD_RA1
#define TARGET_IS_BLIZZARD_RA1
#endif

#ifndef PART_TM4C123GH6PM
#define PART_TM4C123GH6PM
#endif
//----------------------------------------------------------------------------
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/ssi.h"
#include "driverlib/pin_map.h"
#include "driverlib/adc.h"
//----------------------------------------------------------------------------

#define DAC_A  0x4000 	//DAC A
#define DAC_B  0x8000	//DAC B
#define DAC_AB 0xC000	//DAC A and B


void delay()
{
	unsigned int counter = 0;
	while(counter > 1000){
		counter++;
	}
}

void ssi_en()
{
    ROM_SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ); 	//系统时钟设置为16M

    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI1);	//系统外设使能
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    ROM_GPIOPinConfigure(GPIO_PF2_SSI1CLK);	//SSI1端口使能
    ROM_GPIOPinConfigure(GPIO_PF3_SSI1FSS);
//  ROM_GPIOPinConfigure(GPIO_PF4_SSI0RX);
    ROM_GPIOPinConfigure(GPIO_PF1_SSI1TX);

	//----------------------------------------------------------------------------
	//LDAC置高
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_2);
	ROM_GPIOPinWrite(GPIO_PORTB_BASE, GPIO_PIN_2, GPIO_PIN_2);
	//RS置高
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_3);
	ROM_GPIOPinWrite(GPIO_PORTB_BASE, GPIO_PIN_3, GPIO_PIN_3);
	//MSB置高
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE, GPIO_PIN_4);
	ROM_GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_PIN_4);
	//----------------------------------------------------------------------------

    ROM_GPIOPinTypeSSI(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3);	//SSI端口功能使能

    ROM_SSIConfigSetExpClk(SSI1_BASE, ROM_SysCtlClockGet(), SSI_FRF_MOTO_MODE_0, SSI_MODE_MASTER, 1000000, 16);	//端口模式:1M,16位数据

    ROM_SSIEnable(SSI1_BASE);
}

//----------------------------------------------------------------------------
//输入参数：
//			unsigned long val，取值范围0~16384
//返回值：
//			0， 参数不正确；
//			1，传输成功；
//----------------------------------------------------------------------------
unsigned char ssi_send_2_dac8802(unsigned long val)
{
	if(val > 16384) return 0;
    ROM_SSIDataPut(SSI1_BASE, DAC_AB + val);	//发数据+
    while(ROM_SSIBusy(SSI1_BASE));
	ROM_GPIOPinWrite(GPIO_PORTB_BASE, GPIO_PIN_2, 0);
	delay();
	ROM_GPIOPinWrite(GPIO_PORTB_BASE, GPIO_PIN_2, GPIO_PIN_2);
	delay();
    return 1;
}


void Init_ADC(){

	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);

	GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_1);

	ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);

	ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_CH3 | ADC_CTL_IE |
							 ADC_CTL_END);

	ADCSequenceEnable(ADC0_BASE, 3);

	ADCIntClear(ADC0_BASE, 3);
}

void get_adc_val()
{
	uint32_t pui32ADC0Value[1];

	ADCProcessorTrigger(ADC0_BASE, 3);

	while(!ADCIntStatus(ADC0_BASE, 3, false))
	{
	}

	ADCIntClear(ADC0_BASE, 3);

	ADCSequenceDataGet(ADC0_BASE, 3, pui32ADC0Value);
	}

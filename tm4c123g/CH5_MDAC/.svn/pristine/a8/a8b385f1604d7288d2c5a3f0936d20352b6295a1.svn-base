#ifndef TARGET_IS_BLIZZARD_RA1
#define TARGET_IS_BLIZZARD_RA1
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "LCDDriver.h"
//#include "LCD_Matrix.h"
#include "driverlib/rom.h"
#include "driverlib/adc.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "inc/hw_ints.h"
#include "driverlib/interrupt.h"
#include "mdac.h"

///************************************************************************
// * 初始化ADC获取滚轮电压值
// * 		――――――――|
////				|
////		M4	 PE0|<--ADC		模数转换信号源
////		________|
// *
// ***********************************************************************/
#define ADC_BASE		ADC0_BASE			// 使用ADC0
#define SequenceNum 	3					// 使用序列3
//void Init_ADCWheel(){
//
//	// The ADC0 peripheral must be enabled for use.
//	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
//
//	// For this example ADC0 is used with AIN0 on port E7.
//	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
//
//	// Select the analog ADC function for these pins.
//	ROM_GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_0);
//
//	// Enable sample sequence 3 with a processor signal trigger.
//	ROM_ADCSequenceConfigure(ADC_BASE, SequenceNum, ADC_TRIGGER_PROCESSOR, 0);
//
//	// Configure step 0 on sequence 3.  Sample channel 0 (ADC_CTL_CH0) in
//	ROM_ADCSequenceStepConfigure(ADC_BASE, SequenceNum, 0, ADC_CTL_CH3 | ADC_CTL_IE |
//							 ADC_CTL_END);
//
//	// Since sample sequence 3 is now configured, it must be enabled.
//	ROM_ADCSequenceEnable(ADC_BASE, SequenceNum);
//
//	// Clear the interrupt status flag.  This is done to make sure the
//	// interrupt flag is cleared before we sample.
//	ROM_ADCIntClear(ADC_BASE, SequenceNum);
//}
/************************************************************************
 * 初始化ADC获取滚轮电压值
 * 		――――――――|
//				|
//		M4	 PD2|<--ADC1		模数转换信号源
//		________|
 *
 ***********************************************************************/
#define ADC_BASE		ADC0_BASE			// 使用ADC0
#define SequenceNum1 	1					// 使用序列3
void Init_ADC_GPIO()
{
	// The ADC0 peripheral must be enabled for use.
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);

	// For this example ADC0 is used with AIN0 on port E7.
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);

	// Select the analog ADC function for these pins.
	ROM_GPIOPinTypeADC(GPIO_PORTD_BASE, GPIO_PIN_2);

	// Enable sample sequence 3 with a processor signal trigger.  Sequence 3
	ROM_ADCSequenceConfigure(ADC_BASE, SequenceNum1, ADC_TRIGGER_PROCESSOR, 0);

	// Configure step 0 on sequence 3.  Sample channel 0 (ADC_CTL_CH0) in
	ROM_ADCSequenceStepConfigure(ADC_BASE, SequenceNum1, 0, ADC_CTL_CH5 | ADC_CTL_IE |
							 ADC_CTL_END);

	// Since sample sequence 3 is now configured, it must be enabled.
	ROM_ADCSequenceEnable(ADC_BASE, SequenceNum1);

	// Clear the interrupt status flag.  This is done to make sure the
	ROM_ADCIntClear(ADC_BASE, SequenceNum1);
}

//-------------------
unsigned char index_buff = 0;
unsigned char index_ver = 0;
unsigned int sample_buff[10] = {0};
unsigned int sample_ver[3] = {0};
unsigned int per_sample = 0;
unsigned int max_sample = 0;
int average_max_sample = 0;
		int total_sample = 0;
int main(void)
{
	unsigned int dac8802_val = 8000;
	unsigned char key_val = 0;
	uint32_t pui32ADC0Value[1];			// 保存ADC采样值
	uint32_t pui32ADC1Value[1];			// 保存ADC采样值
	unsigned int pre_adc = 0;
	unsigned int cur_adc = 0;
	ROM_SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ); 	//系统时钟设置为16M

	// 使能LCD
	LCD_Enable();

	// 初始化LCD
	LCD_Init();

	// 清屏
	LCD_ScreenClr();

	//初始化按钮
	Init_Key();

	//初始化SSI1通信
	ssi_en();

	// Initial ADCWheel
	Init_ADCWheel();
	Init_ADC_GPIO();


//	LCD_Draw_Char('s', LINE_ONE, CHAR_WIDTH * 0);			// s
//	LCD_Draw_Char('s', LINE_ONE, CHAR_WIDTH * 1);			// s
//	LCD_Draw_Char('i', LINE_ONE, CHAR_WIDTH * 2);			// i
//	LCD_Draw_Chinese(5, LINE_ONE, 25);						// 值
//	LCD_Draw_Char(':', LINE_ONE, 40);						// :

	LCD_Draw_Char('P', LINE_ONE, CHAR_WIDTH * 0);
	LCD_Draw_Char('e', LINE_ONE, CHAR_WIDTH * 1);
	LCD_Draw_Char('a', LINE_ONE, CHAR_WIDTH * 2);
	LCD_Draw_Char('k', LINE_ONE, CHAR_WIDTH * 3);

	LCD_Draw_Char('d', LINE_ONE, CHAR_WIDTH * 5);
	LCD_Draw_Char('e', LINE_ONE, CHAR_WIDTH * 6);
	LCD_Draw_Char('t', LINE_ONE, CHAR_WIDTH * 7);
	LCD_Draw_Char('e', LINE_ONE, CHAR_WIDTH * 8);
	LCD_Draw_Char('c', LINE_ONE, CHAR_WIDTH * 9);
	LCD_Draw_Char('t', LINE_ONE, CHAR_WIDTH * 10);
	LCD_Draw_Char('i', LINE_ONE, CHAR_WIDTH * 11);
	LCD_Draw_Char('o', LINE_ONE, CHAR_WIDTH * 12);
	LCD_Draw_Char('n', LINE_ONE, CHAR_WIDTH * 13);

	LCD_Draw_Char('v', LINE_TWO, CHAR_WIDTH * 0);
	LCD_Draw_Char('o', LINE_TWO, CHAR_WIDTH * 1);
	LCD_Draw_Char('l', LINE_TWO, CHAR_WIDTH * 2);
	LCD_Draw_Char('t', LINE_TWO, CHAR_WIDTH * 3);
	LCD_Draw_Char('a', LINE_TWO, CHAR_WIDTH * 4);
	LCD_Draw_Char('g', LINE_TWO, CHAR_WIDTH * 5);
	LCD_Draw_Char('e', LINE_TWO, CHAR_WIDTH * 6);
	LCD_Draw_Char(':', LINE_TWO, CHAR_WIDTH * 7);


//	LCD_Draw_Char('8', LINE_THREE, 40 + 0);
//	LCD_Draw_Char('0', LINE_THREE, 40 + 8);
//	LCD_Draw_Char('0', LINE_THREE, 40 + 16);
//	LCD_Draw_Char('0', LINE_THREE, 40 + 24);
//	LCD_Draw_Char('0', LINE_THREE, 40 + 32);

	LCD_Draw_Char('V', LINE_TWO, 127-8);

	while(1)
	{
		ADCProcessorTrigger(ADC_BASE, SequenceNum);

		// Wait for conversion to be completed.
		while(!ADCIntStatus(ADC_BASE, SequenceNum, false))
		{
		}

		// Clear the ADC interrupt flag.
		ADCIntClear(ADC_BASE, SequenceNum);

		// Read ADC Value.
		ADCSequenceDataGet(ADC_BASE, SequenceNum, pui32ADC0Value);

		cur_adc = pui32ADC0Value[0];

		if(cur_adc-pre_adc > 60 || pre_adc-cur_adc > 60)
		{
			pre_adc = cur_adc;

			dac8802_val = (16384 / 4096) * pui32ADC0Value[0];

//		key_val = scan_key();
//
//		if(key_val)
//		{
//			switch(key_val)
//			{
//				case 0x01:
//					dac8802_val = dac8802_val + 1000; if(dac8802_val > 16384) {dac8802_val = 0;} break;
//
//				case 0x02:
//					dac8802_val = dac8802_val - 1000; if(dac8802_val > 16384) {dac8802_val = 0;} break;
//
//				default: break;
//			}

			int i;

			unsigned char data[5] = {0};
			data[0] = dac8802_val / 10000;
			data[1] = (dac8802_val / 1000) % 10;
			data[2] = (dac8802_val / 100) % 10;
			data[3] = (dac8802_val / 10) % 10;
			data[4] = (dac8802_val / 1) % 10;

			for(i = 0; i < 5; ++i)
			{
				LCD_Draw_Char('0' + data[i], LINE_FOUR, 40 + 8 * i);
			}
		}

		ssi_send_2_dac8802(dac8802_val);

		//######################################################
		ADCProcessorTrigger(ADC_BASE, SequenceNum1);

		// Wait for conversion to be completed.
		while(!ADCIntStatus(ADC_BASE, SequenceNum1, false))
		{
		}

		// Clear the ADC interrupt flag.
		ADCIntClear(ADC_BASE, SequenceNum1);

		// Read ADC Value.
		ADCSequenceDataGet(ADC_BASE, SequenceNum1, pui32ADC1Value);

		unsigned long cur_sample = pui32ADC1Value[0] * 3300 / 4096;

		sample_ver[index_ver++] = cur_sample;

		if(index_ver > 2)
			index_ver = 0;

		if((sample_ver[0] < sample_ver[1])&&(sample_ver[1] > sample_ver[2]))
		{
			sample_buff[index_buff] = sample_ver[1];

			index_buff = index_buff + 1;
		}

		if(index_buff >= 10)
		{
			index_buff = 0;

			int i=0;
			int j=0;
			int temp=0;
			for(i=0;i<10;i++)
			{
				for(j=0;j<10-i;j++)
				{
					if(sample_buff[j]>sample_buff[j+1])
					{
						temp = sample_buff[j];
						sample_buff[j]=sample_buff[j+1];
						sample_buff[j+1]=temp;
					}
				}
			}

//			for(i = 4; i < 10; ++i)
//			{
//				total_sample += sample_buff[i];
//			}

			average_max_sample = sample_buff[9];

			unsigned char data1[4] = {0};
			data1[0] = average_max_sample / 1000;
			data1[1] = (average_max_sample / 100) % 10;
			data1[2] = (average_max_sample / 10) % 10;
			data1[3] = (average_max_sample / 1) % 10;

			for(i = 0; i < 4; ++i)
			{
				LCD_Draw_Char('.', LINE_TWO, 70 + 8 * 1);
				if(i > 0){
					LCD_Draw_Char('0' + data1[i], LINE_TWO, 70 + 8 * (i + 1));
				}else{
					LCD_Draw_Char('0' + data1[i], LINE_TWO, 70 + 8 * i);
				}
			}

			total_sample = 0;
			//######################################################
			//250 ms
			ROM_SysCtlDelay(SysCtlClockGet() / 12);

		}


	}
}
//---------------------------------------------------------------------------
